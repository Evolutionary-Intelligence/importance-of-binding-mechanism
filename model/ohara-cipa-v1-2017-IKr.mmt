[[model]]
name: ohara-cipa-2017
display_name: O'Hara-CiPA-v1, 2017
version: 20220201
mmt_authors: Michael Clerx
desc: """
    The 2017 "CiPA v1" update [1] of the O'Hara et al. model of the human
    ventricular AP [2].

    This Myokit implementation was based on CellML code [3], published by Chang
    et al. [4]. The authors checked the CellML output (after converting to
    Chaste using PyCML) against derivatives calculated with the original code
    published by the FDA [5].

    The model differs from the original O'Hara model [2] in the following
    aspects:
     - The IKr formulation was replaced entirely, as described in [1,4].
     - Conductances for INaL, ICaL, IKs, and IK1 were rescaled, as described
       in [6].

    References:

    [1] Li, Dutta et al., Colatsky (2017) Improving the In Silico Assessment o
        Proarrhythmia Risk by Combining hERG (Human Ether-à-go-go-Related Gene)
        Channel–Drug Binding Kinetics and Multichannel Pharmacology.
        Circulation: Arrhythmia and Electrophysiology.
        doi: 10.1161/CIRCEP.116.004628

    [2] O'Hara, Virág, Varró, Rudy (2011) Simulation of the Undiseased Human
        Cardiac Ventricular Action Potential: Model Formulation and
        Experimental Validation. PLoS Computational Biology
        doi: 10.1371/journal.pcbi.1002061

    [3] https://models.cellml.org/e/4e8/ohara_rudy_cipa_v1_2017.cellml/view

    [4] Chang, Dutta et al., Li (2017) Uncertainty Quantification Reveals the
        Importance of Data Variability and Experimental Design Considerations
        for in Silico Proarrhythmia Risk Assessment. Frontiers in Physiology.
        doi: 10.3389/fphys.2017.00917

    [5] https://github.com/FDA/CiPA/blob/master/AP_simulation/models/newordherg_qNet.c

    [6] Dutta, Chang et al. Li (2017) Optimization of an In silico Cardiac Cell
        Model for Proarrhythmia Risk Assessment. Frontiers in Physiology.
        doi: 10.3389/fphys.2017.00616

"""
# Initial values
# membrane.V        = -8.80019046500000002e1
# sodium.Na_i       =  7.26800449799999981
# sodium.Na_ss      =  7.26808997699999981
# potassium.K_i     =  1.44655591799999996e2
# potassium.K_ss    =  1.44655565099999990e2
# calcium.Ca_i      =  8.6e-5
# calcium.Ca_ss     =  8.49e-5
# calcium.Ca_nsr    =  1.61957453799999995
# calcium.Ca_jsr    =  1.57123401400000007
ikr.IC1           =  0.999637
ikr.IC2           =  6.83207999999999982e-5
ikr.C1            =  1.80144999999999990e-8
ikr.C2            =  8.26618999999999954e-5
ikr.O             =  1.55510000000000007e-4
ikr.IO            =  5.67622999999999969e-5
ikr.IObound       =  0
ikr.Obound        =  0
ikr.Cbound        =  0
ikr.D             =  0
# iks.x1            =  2.70775802499999996e-1
# iks.x2            =  1.92850342599999990e-4
# ik1.x             =  9.96759759399999945e-1

#
# Simulator variables
#
[engine]
time = 0 [ms]
    in [ms]
    bind time
pace = 0 bind pace

#
# Membrane potential
# Page 5 of the appendix to [2]
#
[membrane]
# dot(V) = -(i_ion + stimulus.i_stim)
#     label membrane_potential
#     in [mV]
# i_ion = (
#         + sodium.INa_tot
#         + sodium.INa_ss_tot
#         + calcium.ICa_tot
#         + calcium.ICa_ss_tot
#         + potassium.IK_tot
#         + potassium.IK_ss_tot
#         )
#     label cellular_current
#     in [A/F]
V = engine.pace
    label membrane_potential
    in [mV]

#
# Cell geometry
# Page 6 of the appendix to [2]
#
[cell]
mode = 0
    desc: The type of cell. Endo = 0, Epi = 1, Mid = 2
L = 0.01 [cm] : Cell length
    in [cm]
r = 0.0011 [cm] : Cell radius
    in [cm]
vcell = 1000 [uL/mL] * 3.14 * r * r * L
    in [uL]
    desc: Cell volume
Ageo = 2 * 3.14 * r * r + 2 * 3.14 * r * L
    in [cm^2]
    desc: Geometric cell area
Acap = 2 * Ageo
    in [cm^2]
    desc: Capacitative membrane area
AFC = Acap / phys.F * 1 [uF/cm^2]
    in [uF*mol/C]
vmyo = 0.68 * vcell
    in [uL]
    desc: Volume of the cytosolic compartment
vnsr = 0.0552 * vcell
    in [uL]
    desc: Volume of the NSR compartment
vjsr = 0.0048 * vcell
    in [uL]
    desc: Volume of the JSR compartment
vss = 0.02 * vcell
    in [uL]
    desc: Volume of the Submembrane space near the T-tubules

#
# Physical constants
# Page 2 of the appendix to [2]
#
[phys]
R = 8314 [J/kmol/K] : Gas constant
    in [J/kmol/K]
T = 310 [K] : Temperature
    in [K]
F = 96485 [C/mol] : Faraday constant
    in [C/mol]
RTF = R * T / F
    in [mV]
FRT = F / (R * T)
    in [1/mV]
FFRT = F * FRT
    in [C/mol/mV]

#
# Extracellular concentrations
# Page 5 of the appendix to [2]
#
[extra]
Na_o = 140 [mM] : Extracellular Na+ concentration
    in [mM]
Ca_o = 1.8 [mM] : Extracellular Ca2+ concentration
    in [mM]
K_o = 5.4 [mM] : Extracellular K+ concentration
    in [mM]

#
# Reversal potentials
# Page 6 of the appendix to [2]
#
[rev]
# ENa = phys.RTF * log(extra.Na_o / sodium.Na_i)
#     in [mV]
#     desc: Reversal potential for Sodium currents
EK = phys.RTF * log(extra.K_o / 1.44655591799999996e2)
    in [mV]
    desc: Reversal potential for Potassium currents
PNaK = 0.01833
    desc: Permeability ratio K+ to Na+
# EKs = phys.RTF * log((extra.K_o + PNaK * extra.Na_o) / (potassium.K_i + PNaK * sodium.Na_i))
#     desc: Reversal potential for IKs
#     in [mV]


#
# IKr: Rapid delayed rectifier potassium current
# Described in [1,4].
#
[ikr]
use membrane.V
A1 = 0.0264 [mS/uF]
    in [mS/uF]
A11 = 0.0007868 [mS/uF]
    in [mS/uF]
A2 = 4.986e-6 [mS/uF]
    in [mS/uF]
A21 = 5.455e-6 [mS/uF]
    in [mS/uF]
A3 = 0.001214 [mS/uF]
    in [mS/uF]
A31 = 0.005509 [mS/uF]
    in [mS/uF]
A4 = 1.854e-5 [mS/uF]
    in [mS/uF]
A41 = 0.001416 [mS/uF]
    in [mS/uF]
A51 = 0.4492 [mS/uF]
    in [mS/uF]
A52 = 0.3181 [mS/uF]
    in [mS/uF]
A53 = 0.149 [mS/uF]
    in [mS/uF]
A61 = 0.01241 [mS/uF]
    in [mS/uF]
A62 = 0.3226 [mS/uF]
    in [mS/uF]
A63 = 0.008978 [mS/uF]
    in [mS/uF]
B1 = 4.631e-5 [1/mV]
    in [1/mV]
B11 = 1.535e-8 [1/mV]
    in [1/mV]
B2 = -0.004226 [1/mV]
    in [1/mV]
B21 = -0.1688 [1/mV]
    in [1/mV]
B3 = 0.008516 [1/mV]
    in [1/mV]
B31 = 7.771e-9 [1/mV]
    in [1/mV]
B4 = -0.04641 [1/mV]
    in [1/mV]
B41 = -0.02877 [1/mV]
    in [1/mV]
B51 = 0.008595 [1/mV]
    in [1/mV]
B52 = 3.613e-8 [1/mV]
    in [1/mV]
B53 = 0.004668 [1/mV]
    in [1/mV]
B61 = 0.1725 [1/mV]
    in [1/mV]
B62 = -6.57499999999999990e-4 [1/mV]
    in [1/mV]
B63 = -0.02215 [1/mV]
    in [1/mV]
q1 = 4.843
q11 = 4.942
q2 = 4.23
q21 = 4.156
q3 = 4.962
q31 = 4.22
q4 = 3.769
q41 = 1.459
q51 = 5
q52 = 4.663
q53 = 2.412
q61 = 5.568
q62 = 5
q63 = 5.682
Kt = 0 [mS/uF]
    in [mS/uF]
Ku = 0 [mS/uF]
    in [mS/uF]
Temp = 37
Vhalf = 1 [mV]
    in [mV]
halfmax = 1
n = 1
Kmax = 0
dot(C1) = -(A1 * exp(B1 * V) * C1 * exp((Temp - 20) * log(q1) / 10) - A2 * exp(B2 * V) * C2 * exp((Temp - 20) * log(q2) / 10)) - (A51 * exp(B51 * V) * C1 * exp((Temp - 20) * log(q51) / 10) - A61 * exp(B61 * V) * IC1 * exp((Temp - 20) * log(q61) / 10))
dot(C2) = A1 * exp(B1 * V) * C1 * exp((Temp - 20) * log(q1) / 10) - A2 * exp(B2 * V) * C2 * exp((Temp - 20) * log(q2) / 10) - (A31 * exp(B31 * V) * C2 * exp((Temp - 20) * log(q31) / 10) - A41 * exp(B41 * V) * O * exp((Temp - 20) * log(q41) / 10)) - (A52 * exp(B52 * V) * C2 * exp((Temp - 20) * log(q52) / 10) - A62 * exp(B62 * V) * IC2 * exp((Temp - 20) * log(q62) / 10))
dot(D) = 0 [1/ms]
dot(IC1) = -(A11 * exp(B11 * V) * IC1 * exp((Temp - 20) * log(q11) / 10) - A21 * exp(B21 * V) * IC2 * exp((Temp - 20) * log(q21) / 10)) + A51 * exp(B51 * V) * C1 * exp((Temp - 20) * log(q51) / 10) - A61 * exp(B61 * V) * IC1 * exp((Temp - 20) * log(q61) / 10)
dot(IC2) = A11 * exp(B11 * V) * IC1 * exp((Temp - 20) * log(q11) / 10) - A21 * exp(B21 * V) * IC2 * exp((Temp - 20) * log(q21) / 10) - (A3 * exp(B3 * V) * IC2 * exp((Temp - 20) * log(q3) / 10) - A4 * exp(B4 * V) * IO * exp((Temp - 20) * log(q4) / 10)) + A52 * exp(B52 * V) * C2 * exp((Temp - 20) * log(q52) / 10) - A62 * exp(B62 * V) * IC2 * exp((Temp - 20) * log(q62) / 10)
dot(IO) = A3 * exp(B3 * V) * IC2 * exp((Temp - 20) * log(q3) / 10) - A4 * exp(B4 * V) * IO * exp((Temp - 20) * log(q4) / 10) + A53 * exp(B53 * V) * O * exp((Temp - 20) * log(q53) / 10) - A63 * exp(B63 * V) * IO * exp((Temp - 20) * log(q63) / 10) - (Kmax * Ku * exp(n * log(D)) / (exp(n * log(D)) + halfmax) * IO - Ku * A53 * exp(B53 * V) * exp((Temp - 20) * log(q53) / 10) / (A63 * exp(B63 * V) * exp((Temp - 20) * log(q63) / 10)) * IObound)
dot(O) = A31 * exp(B31 * V) * C2 * exp((Temp - 20) * log(q31) / 10) - A41 * exp(B41 * V) * O * exp((Temp - 20) * log(q41) / 10) - (A53 * exp(B53 * V) * O * exp((Temp - 20) * log(q53) / 10) - A63 * exp(B63 * V) * IO * exp((Temp - 20) * log(q63) / 10)) - (Kmax * Ku * exp(n * log(D)) / (exp(n * log(D)) + halfmax) * O - Ku * Obound)
dot(Cbound) = -(Kt / (1 + exp(-(V - Vhalf) / 6.789 [mV])) * Cbound - Kt * Obound) - (Kt / (1 + exp(-(V - Vhalf) / 6.789 [mV])) * Cbound - Kt * IObound)
dot(IObound) = Kmax * Ku * exp(n * log(D)) / (exp(n * log(D)) + halfmax) * IO - Ku * A53 * exp(B53 * V) * exp((Temp - 20) * log(q53) / 10) / (A63 * exp(B63 * V) * exp((Temp - 20) * log(q63) / 10)) * IObound + Kt / (1 + exp(-(V - Vhalf) / 6.789 [mV])) * Cbound - Kt * IObound
dot(Obound) = Kmax * Ku * exp(n * log(D)) / (exp(n * log(D)) + halfmax) * O - Ku * Obound + Kt / (1 + exp(-(V - Vhalf) / 6.789 [mV])) * Cbound - Kt * Obound
fKr = piecewise(cell.mode == 0, 1, cell.mode == 1, 1.3, 0.8)
# gKr =  4.65854545454545618e-2 [mS/uF]
#     in [mS/uF]
Kb = Kmax * Ku * exp(n * log(D)) / (exp(n * log(D)) + halfmax)
Kn = Kt / (1 + exp(-(V - Vhalf) / 6.789 [mV]))
gKr = 0.0418 [mS/uF]
    in [mS/uF]
IKr = fKr * gKr * sqrt(extra.K_o / 5.4 [mM]) * O * (V - rev.EK)
    in [A/F]

#
# Diffusion fluxes
# Page 16 of the appendix to [2]
#
# [diff]
# JdiffK = (potassium.K_ss - potassium.K_i) / 2 [ms]
#     in [mM/ms]


#
# Intracellular potassium concentrations
# Page 18 of the appendix to [2]
#
# [potassium]
# use cell.AFC, cell.vss, cell.vmyo
# IK_tot = (
#     + ito.Ito
#     + ikr.IKr
#     + iks.IKs
#     + ik1.IK1
#     + ikb.IKb
#     - 2 * inak.INaK
# )
#     in [A/F]
# IK_ss_tot = ical.ICaK
#     in [A/F]
# dot(K_i) = -(IK_tot + stimulus.i_stim) * AFC / vmyo + diff.JdiffK * vss / vmyo
#     desc: Intracellular Potassium concentration
#     in [mM]
# dot(K_ss) = -IK_ss_tot * AFC / vss - diff.JdiffK
#     desc: Potassium concentration in the T-Tubule subspace
#     in [mM]

[[protocol]]
# Level  Start    Length   Period   Multiplier
1        50       0.5      1000     0

[[script]]
import matplotlib.pyplot as plt
import myokit

# Get the model and protocol, create a simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)

# Create an empty figure
plt.figure()
plt.xlabel('Time (ms)')
plt.ylabel('Membrane potential (mV)')

# Select variables for logging
variables = [
    'engine.time',
    'membrane.V',
]

# Run a simulation in every mode
modes = {
    'Endocardial' : 0,
    'Epicardial' : 1,
    'Mid-myocardial' : 2,
}
for name, mode in modes.items():

    # Change mode in simulation
    s.set_constant('cell.mode', mode)

    # Pre-pace for a few beats
    s.pre(50 * 1000)

    # Run a logged simulation
    d = s.run(500, log=variables)

    # Display the simulated membrane potential
    plt.plot(d['engine.time'], d['membrane.V'], label=name)

    # Reset the simulation
    s.reset()

plt.legend(loc='upper right')
plt.show()
